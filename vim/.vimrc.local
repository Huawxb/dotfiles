
" color and themes
let g:solarized_termcolors=16
color solarized
let g:airline_theme = 'powerlineish'

" enable solarized theme
" syntax enable
" set background=dark
" colorscheme solarized

" configure airline interface
let g:airline#extensions#tabline#enabled = 1
fdsa发达所发生范德萨发是的let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_section_发生的范德萨b = '%{getcwd()}'
let g:airline_section_c = '%t'发达所发生的斤斤计较间距

" fix airline font
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')发达是发的谁
    let g:airline_symbols = {}发大水范德萨
endif
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'发达所发生的
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'ξ'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" dont save .swp file
set nobackup

" automatically use the system clipboard for copy and paste.
set clipboard=unnamedplus

" enables mouse in all modes to scroll in tmux
set mouse=a

" highlight all search matches
:set hlsearch

" press space to turn off highlighting and clear any message already displayed.
:nnoremap <silent> <space> :nohlsearch<bar>:echo<cr>

" search for visually selected text
vnoremap // y/<c-r>"

" using standard editor shortcuts in vim

set nu
:map <c-a> gvgg
":map <c-n> :enew
:map <c-o> :e . <enter>
:map <c-s> :w <enter>
":map <c-c> y
:map <c-v> p
:map <c-x> <delete>
:map <c-z> u
":map <c-t> :tabnew <enter>
:map <c-i> >>
:map <c-q> :q! <enter>
:map <c-w> :bp <bar> bd! #<enter>
":map <c-f> /
:map <f3> n
:map <c-h> :%s/
:map <s-t> vat
:map <s-t> vit
:map <s-{> vi{
:map <s-(> vi(
:map <s-[> vi[

" nerdtree config
let nerdtreeshowhidden=1
let nerdtreequitonopen=0

" nerdtree-tabs config
map <leader>n <plug>nerdtreetabstoggle<cr>
let g:nerdtree_tabs_open_on_console_startup=1
let g:nerdtree_tabs_open_on_gui_startup=1
let g:nerdtree_tabs_open_on_new_tab=1


" tab two spaces
set tabstop=2 softtabstop=2 expandtab shiftwidth=2 smarttab

" tab navigation like firefox.
nnoremap <c-s-tab> :bprevious<cr>
nnoremap <c-tab>   :bnext<cr>
nnoremap <c-t>     :enew<cr>
inoremap <c-s-tab> <esc>:bprevious<cr>i
inoremap <c-tab>   <esc>:bnext<cr>i
inoremap <c-t>     <esc>:enew<cr>


" !workaround! switch tab with ctrl + j or k cause its not support in tmux
nnoremap <c-j> :bprevious<cr>
nnoremap <c-k> :bnext<cr>
nnoremap <c-l> :bnext<cr>

" ctrlsf config
nmap     <c-f>f <plug>ctrlsfprompt
vmap     <c-f>f <plug>ctrlsfvwordpath
vmap     <c-f>f <plug>ctrlsfvwordexec
nmap     <c-f>n <plug>ctrlsfcwordpath
nmap     <c-f>p <plug>ctrlsfpwordpath
nnoremap <c-f>o :ctrlsfopen<cr>
nnoremap <c-f>t :ctrlsftoggle<cr>
inoremap <c-f>t <esc>:ctrlsftoggle<cr>
"let g:ctrlsf_default_root = 'project'

" 默认忽略 node_modules
let g:ctrlsf_ignore_dir = ["node_modules", "bower_components"]

" delete without yanking
nnoremap d "_d
vnoremap d "_d

" replace currently selected text with default register
" without yanking it
vnoremap p "_dp

" mappings to move lines
nnoremap <a-j> :m .+1<cr>==
nnoremap <a-k> :m .-2<cr>==
inoremap <a-j> <esc>:m .+1<cr>==gi
inoremap <a-k> <esc>:m .-2<cr>==gi
vnoremap <a-j> :m '>+1<cr>gv=gv
vnoremap <a-k> :m '<-2<cr>gv=gv


" should markdown preview get shown automatically upon opening markdown buffer
let g:livedown_autorun = 1

" should the browser window pop-up upon previewing
let g:livedown_open = 1

"##### auto fcitx  ###########
" vim insertleave event doesn't occur when using ctrl-c instead of esc
:ino <c-c> <esc>

let g:input_toggle = 1
function! fcitx2en()
   let s:input_status = system("fcitx-remote")
   if s:input_status == 2
      let g:input_toggle = 1
      let l:a = system("fcitx-remote -c")
   endif
endfunction

function! fcitx2zh()
   let s:input_status = system("fcitx-remote")
   if s:input_status != 2 && g:input_toggle == 1
      let l:a = system("fcitx-remote -o")
      let g:input_toggle = 0
   endif
endfunction

set timeoutlen=100
autocmd insertleave * call fcitx2en()
autocmd insertenter * call fcitx2zh()
"##### auto fcitx end ######
" shift + jkhl will go one window left, etc.
nmap <s-h> :wincmd h<cr>
nmap <s-j> :wincmd j<cr>
nmap <s-k> :wincmd k<cr>
nmap <s-l> :wincmd l<cr>法撒旦
